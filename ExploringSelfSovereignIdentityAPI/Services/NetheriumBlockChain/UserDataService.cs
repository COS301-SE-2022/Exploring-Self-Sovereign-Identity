using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts;
using System.Threading;
using Nethereum.Contracts.ContractHandlers;
using ExploringSelfSovereignIdentityAPI.Models;
using ExploringSelfSovereignIdentityAPI.Services.Encryption;
using Nethereum.Web3.Accounts;

namespace ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain
{
    public class UserDataService : IUserDataService
    {
        /*static string url = "http://127.0.0.1:8545";
        static string privateKey = "734674bd34f2476f15c6d5f6c8c1c7c92e465921e546771d088b958607531d10";
        private readonly string senderAddress = "0x8A1f48B91fbDC94b82E1997c2630466c5FaCf38b";
        private static string contractAddress = "0xA52dD18FF4b5C5E84502C09f31068BAB7aD01C00";

        static Web3 web3 = new Web3(new Nethereum.Web3.Accounts.Account(privateKey), url);

        private ContractHandler contractHandler = web3.Eth.GetContractHandler(contractAddress);

        public UserDataService()
        {
            web3.TransactionManager.UseLegacyAsDefault = true;
        }*/

        private static string url = "http://testchain.nethereum.com:8545";
        private static string privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
        private static Account acc = new Nethereum.Web3.Accounts.Account(privateKey, 444444444500);
        private static Web3 web3 = new Web3(acc, url);

        private static ContractHandler contractHandler;

        private readonly IEncryptionService encryptservice;

        public UserDataService()
        {
            web3.TransactionManager.UseLegacyAsDefault = true;
            encryptservice = new EncryptionService();

            Console.WriteLine(acc.Address);
        }

        private async Task<ContractHandler> deploy()
        {
            var userDataContractDeployment = new UserDataContractDeployment();

            var transactionReceiptDeployment = await web3.Eth.GetContractDeploymentHandler<UserDataContractDeployment>().SendRequestAndWaitForReceiptAsync(userDataContractDeployment);
            var contractAddress = transactionReceiptDeployment.ContractAddress;

            return web3.Eth.GetContractHandler(contractAddress);
        }



        public async Task<string> createUser(string id)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var createUserFunction = new CreateUserFunction();
            createUserFunction.Id = id;
            var createUserFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(createUserFunction);
            return "success";
        }

        public async Task<String> newTransactionRequest(TransactionRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            TransactionRequest tr = new TransactionRequest();

            TransactionStamp stamp = new TransactionStamp();
            stamp.ToID = request.Stamp.ToID;
            stamp.FromID = request.Stamp.FromID;
            stamp.Message = request.Stamp.Message;
            stamp.Date = DateTime.Now.ToString();
            stamp.Status = "pending";

            List<string> attrs = new List<string>();

            for (int i=0; i<request.Attributes.Count; i++) 
            {
                attrs.Add(request.Attributes[i]);
            }

            tr.Attributes = attrs;
            tr.Stamp = stamp;

            var newTransactionRequestFunction = new NewTransactionRequestFunction();
            newTransactionRequestFunction.Request = tr;
            var newTransactionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(newTransactionRequestFunction);

            return "success";
        }

        public async Task<string> approveTransaction(string id, int index)
        {
            if (contractHandler == null) contractHandler = await deploy();

            /* Stage A */
            var approveTransactionStageAFunction = new ApproveTransactionStageAFunction();
            approveTransactionStageAFunction.Id = id;
            approveTransactionStageAFunction.Index = index;
            var approveAFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(approveTransactionStageAFunction);

            /* Stage B */
            var approveBFunction = new ApproveTransactionStageBFunction();
            approveBFunction.Id = id;
            approveBFunction.Index = index;
            var approveBFunctionTxnReceipDTO = await contractHandler.QueryDeserializingToObjectAsync<ApproveTransactionStageBFunction, ApproveTransactionStageBOutputDTO>(approveBFunction);

            approveBFunctionTxnReceipDTO.ReturnValue1.Attributes.ForEach(attribute => attribute.Value = encryptservice.DecryptString(approveBFunctionTxnReceipDTO.ReturnValue1.Stamp.ToID, attribute.Value));
            //approveBFunctionTxnReceipDTO.ReturnValue1.Attributes.ForEach(attribute => attribute.Value = encryptservice.EncryptString(approveBFunctionTxnReceipDTO.ReturnValue1.Stamp.FromID, attribute.Value));

            /* Stage C */
            var approveTransactionStageCFunction = new ApproveTransactionStageCFunction();
            approveTransactionStageCFunction.Id = approveBFunctionTxnReceipDTO.ReturnValue1.Stamp.FromID;

            approveTransactionStageCFunction.Transaction = approveBFunctionTxnReceipDTO.ReturnValue1;
            var approveTransactionStageCFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(approveTransactionStageCFunction);

            return "success";
        }

        public async Task<string> declineTransaction(string id, int index)
        {
            var declineTransactionFunction = new DeclineTransactionFunction();
            declineTransactionFunction.Id = id;
            declineTransactionFunction.Index = index;
            var declineTransactionFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(declineTransactionFunction);

            return "success";
        }

        /*public async Task<string> approveTransactionStageC(string id, TransactionResponse transaction)
        {
            
            TransactionResponse tr = new TransactionResponse();

            tr.Attributes = transaction.Attributes;
            tr.Stamp = transaction.Stamp;

            var approveTransactionStageCFunction = new ApproveTransactionStageCFunction();
            approveTransactionStageCFunction.Id = id;
            approveTransactionStageCFunction.Transaction = tr;
            var approveTransactionStageCFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(approveTransactionStageCFunction);

            return "success";
        }*/




        public async Task<string> updateAttributes(string id, AttributeBC[] attributes)
        {
            return "success";
        }

        public async Task<GetAttributesTransactionOutputDTO> getAttributesForTransaction(String id, List<Attribute> attributes)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var getAttributesTransaction = new GetAttributesTransactionFunction();
            getAttributesTransaction.Id = id;
            getAttributesTransaction.Attributes = attributes;
            var getTransactionATtributesOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetAttributesTransactionFunction, GetAttributesTransactionOutputDTO>(getAttributesTransaction);

            return getTransactionATtributesOutputDTO;
        }

        public async Task<GetUserDataOutputDTO> updateUserData(UpdateGen2 update)
        {

            

            if (contractHandler == null) contractHandler = await deploy();

            Update u = new Update();
            u.Id = update.Id;

            List<AttributeUpdate> au = new List<AttributeUpdate>();

            for(int i=0;i < update.Attributes.Count;i++)
            {
                Console.WriteLine(update.Attributes[i].Attribute.Name);
                Console.WriteLine(update.Attributes[i].Attribute.Value);
                AttributeUpdate item = new AttributeUpdate();
                item.Attribute = new Attribute();
                item.Attribute.Name = update.Attributes[i].Attribute.Name;
                //item.Attribute.Value = update.Attributes[i].Attribute.Value;
                item.Attribute.Value = encryptservice.EncryptString(u.Id, update.Attributes[i].Attribute.Value);

                item.Index = new BigInteger(update.Attributes[i].Index);

                au.Add(item);
                
            }


            List<CredentialUpdate> cu = new List<CredentialUpdate>();
            for (int i = 0; i < update.Credentials.Count; i++)
            {
                
                CredentialUpdate item2 = new CredentialUpdate();

                List<Attribute> ca = new List<Attribute>();
                for (int j = 0; j < update.Credentials[i].Attributes.Count; j++)
                {
                    Attribute item3 = new Attribute();
                    item3.Name = update.Credentials[i].Attributes[j].Name; 
                    item3.Value = encryptservice.EncryptString(u.Id, update.Credentials[i].Attributes[j].Value);

                    ca.Add(item3);
                }
                item2.Attributes = ca;

                item2.Organization = update.Credentials[i].Organization;

                item2.Index = new BigInteger(update.Credentials[i].Index);

                cu.Add(item2);

            }

            u.Attributes = au;
            u.Credentials = cu;

            var updateUserFunction = new UpdateUserFunction();
            updateUserFunction.Update = u;
            var updateUserFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(updateUserFunction);
            return await getUserData(update.Id);
        }

        public async Task<GetUserDataOutputDTO> getUserData(string id)
        {

            Console.WriteLine("ID called: " + id);

            if (contractHandler == null) contractHandler = await deploy();

            var getUserDataFunction = new GetUserDataFunction(); 
            getUserDataFunction.Id = id;
            GetUserDataOutputDTO getUserDataOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetUserDataFunction, GetUserDataOutputDTO>(getUserDataFunction);

            if (getUserDataOutputDTO == null)
            {
                return getUserDataOutputDTO;
            }

            getUserDataOutputDTO.ReturnValue1.Attributes.ForEach(attribute => attribute.Value = encryptservice.DecryptString(id, attribute.Value));

            getUserDataOutputDTO.ReturnValue1.Credentials.ForEach(credential => credential.Attributes.ForEach(attribute => attribute.Value = encryptservice.DecryptString(id,attribute.Value)));

            if (getUserDataOutputDTO.ReturnValue1.Id == "")
                getUserDataOutputDTO.ReturnValue1.Id = "undefined";

            return getUserDataOutputDTO;
        }
    }



    public partial class UserDataContractDeployment : UserDataContractDeploymentBase
    {
        public UserDataContractDeployment() : base(BYTECODE) { }
        public UserDataContractDeployment(string byteCode) : base(byteCode) { }
    }

    public class UserDataContractDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "";
        public UserDataContractDeploymentBase() : base(BYTECODE) { }
        public UserDataContractDeploymentBase(string byteCode) : base(byteCode) { }

    }

    public partial class ApproveTransactionStageAFunction : ApproveTransactionStageAFunctionBase { }

    [Function("approveTransactionStageA")]
    public class ApproveTransactionStageAFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "index", 2)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class ApproveTransactionStageBFunction : ApproveTransactionStageBFunctionBase { }

    [Function("approveTransactionStageB", typeof(ApproveTransactionStageBOutputDTO))]
    public class ApproveTransactionStageBFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "index", 2)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class ApproveTransactionStageCFunction : ApproveTransactionStageCFunctionBase { }

    [Function("approveTransactionStageC")]
    public class ApproveTransactionStageCFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
        [Parameter("tuple", "transaction", 2)]
        public virtual TransactionResponse Transaction { get; set; }
    }

    public partial class CreateUserFunction : CreateUserFunctionBase { }

    [Function("createUser")]
    public class CreateUserFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
    }

    public partial class DeclineTransactionFunction : DeclineTransactionFunctionBase { }

    [Function("declineTransaction")]
    public class DeclineTransactionFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "index", 2)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class GetAttributesTransactionFunction : GetAttributesTransactionFunctionBase { }

    [Function("getAttributesTransaction", typeof(GetAttributesTransactionOutputDTO))]
    public class GetAttributesTransactionFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
        [Parameter("tuple[]", "attributes", 2)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class GetCredentialFunction : GetCredentialFunctionBase { }

    [Function("getCredential", typeof(GetCredentialOutputDTO))]
    public class GetCredentialFunctionBase : FunctionMessage
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("string", "organization", 2)]
        public virtual string Organization { get; set; }
    }

    public partial class GetCredentialTransactionFunction : GetCredentialTransactionFunctionBase { }

    [Function("getCredentialTransaction", typeof(GetCredentialTransactionOutputDTO))]
    public class GetCredentialTransactionFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
        [Parameter("string", "organization", 2)]
        public virtual string Organization { get; set; }
    }

    public partial class GetUserDataFunction : GetUserDataFunctionBase { }

    [Function("getUserData", typeof(GetUserDataOutputDTO))]
    public class GetUserDataFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
    }

    public partial class NewTransactionRequestFunction : NewTransactionRequestFunctionBase { }

    [Function("newTransactionRequest")]
    public class NewTransactionRequestFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual TransactionRequest Request { get; set; }
    }

    public partial class StringToBytes32Function : StringToBytes32FunctionBase { }

    [Function("stringToBytes32", "bytes32")]
    public class StringToBytes32FunctionBase : FunctionMessage
    {
        [Parameter("string", "source", 1)]
        public virtual string Source { get; set; }
    }

    public partial class UpdateBalanceFunction : UpdateBalanceFunctionBase { }

    [Function("updateBalance")]
    public class UpdateBalanceFunctionBase : FunctionMessage
    {
        [Parameter("string", "_id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class UpdateUserFunction : UpdateUserFunctionBase { }

    [Function("updateUser")]
    public class UpdateUserFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "update", 1)]
        public virtual Update Update { get; set; }
    }



    public partial class ApproveTransactionStageBOutputDTO : ApproveTransactionStageBOutputDTOBase { }

    [FunctionOutput]
    public class ApproveTransactionStageBOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual TransactionResponse ReturnValue1 { get; set; }
    }







    public partial class GetAttributesTransactionOutputDTO : GetAttributesTransactionOutputDTOBase { }

    [FunctionOutput]
    public class GetAttributesTransactionOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<Attribute> ReturnValue1 { get; set; }
    }

    public partial class GetCredentialOutputDTO : GetCredentialOutputDTOBase { }

    [FunctionOutput]
    public class GetCredentialOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual CredentialResponse ReturnValue1 { get; set; }
    }

    public partial class GetCredentialTransactionOutputDTO : GetCredentialTransactionOutputDTOBase { }

    [FunctionOutput]
    public class GetCredentialTransactionOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual CredentialResponse ReturnValue1 { get; set; }
    }

    public partial class GetUserDataOutputDTO : GetUserDataOutputDTOBase { }

    [FunctionOutput]
    public class GetUserDataOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual UserDataResponse ReturnValue1 { get; set; }
    }



    public partial class StringToBytes32OutputDTO : StringToBytes32OutputDTOBase { }

    [FunctionOutput]
    public class StringToBytes32OutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("bytes32", "result", 1)]
        public virtual byte[] Result { get; set; }
    }





    public partial class Attribute : AttributeBase { }

    public class AttributeBase
    {
        [Parameter("string", "name", 1)]
        public virtual string Name { get; set; }
        [Parameter("string", "value", 2)]
        public virtual string Value { get; set; }
    }

    public partial class TransactionStamp : TransactionStampBase { }

    public class TransactionStampBase
    {
        [Parameter("string", "fromID", 1)]
        public virtual string FromID { get; set; }
        [Parameter("string", "toID", 2)]
        public virtual string ToID { get; set; }
        [Parameter("string", "date", 3)]
        public virtual string Date { get; set; }
        [Parameter("string", "message", 4)]
        public virtual string Message { get; set; }
        [Parameter("string", "status", 5)]
        public virtual string Status { get; set; }
    }

    public partial class TransactionResponse : TransactionResponseBase { }

    public class TransactionResponseBase
    {
        [Parameter("tuple[]", "attributes", 1)]
        public virtual List<Attribute> Attributes { get; set; }
        [Parameter("tuple", "stamp", 2)]
        public virtual TransactionStamp Stamp { get; set; }
    }

    public partial class CredentialResponse : CredentialResponseBase { }

    public class CredentialResponseBase
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("tuple[]", "attributes", 2)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class TransactionRequest : TransactionRequestBase { }

    public class TransactionRequestBase
    {
        [Parameter("string[]", "attributes", 1)]
        public virtual List<string> Attributes { get; set; }
        [Parameter("tuple", "stamp", 2)]
        public virtual TransactionStamp Stamp { get; set; }
    }

    public partial class UserDataResponse : UserDataResponseBase { }

    public class UserDataResponseBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "balance", 2)]
        public virtual BigInteger Balance { get; set; }
        [Parameter("tuple[]", "attributes", 3)]
        public virtual List<Attribute> Attributes { get; set; }
        [Parameter("tuple[]", "credentials", 4)]
        public virtual List<CredentialResponse> Credentials { get; set; }
        [Parameter("tuple[]", "transactionRequests", 5)]
        public virtual List<TransactionRequest> TransactionRequests { get; set; }
        [Parameter("tuple[]", "approvedTransactions", 6)]
        public virtual List<TransactionResponse> ApprovedTransactions { get; set; }
    }

    public partial class AttributeUpdate : AttributeUpdateBase { }

    public class AttributeUpdateBase
    {
        [Parameter("tuple", "attribute", 1)]
        public virtual Attribute Attribute { get; set; }
        [Parameter("int256", "index", 2)]
        public virtual BigInteger Index { get; set; }
    }

    public partial class CredentialUpdate : CredentialUpdateBase { }

    public class CredentialUpdateBase
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("int256", "index", 2)]
        public virtual BigInteger Index { get; set; }
        [Parameter("tuple[]", "attributes", 3)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class Update : UpdateBase { }

    public class UpdateBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("tuple[]", "attributes", 2)]
        public virtual List<AttributeUpdate> Attributes { get; set; }
        [Parameter("tuple[]", "credentials", 3)]
        public virtual List<CredentialUpdate> Credentials { get; set; }
    }


    public partial class AttributeUpdateGen2 : AttributeUpdateBaseGen2 { }

    public class AttributeUpdateBaseGen2
    {
        [Parameter("tuple", "attribute", 1)]
        public virtual Attribute Attribute { get; set; }
        [Parameter("int256", "index", 2)]
        public virtual int Index { get; set; }
    }



    public partial class CredentialUpdateGen2 : CredentialUpdateBaseGen2 { }

    public class CredentialUpdateBaseGen2
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("int256", "index", 2)]
        public virtual int Index { get; set; }
        [Parameter("tuple[]", "attributes", 3)]
        public virtual List<Attribute> Attributes { get; set; }
    }



    public partial class UpdateGen2 : UpdateBaseGen2 { }

    public class UpdateBaseGen2
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("tuple[]", "attributes", 2)]
        public virtual List<AttributeUpdateGen2> Attributes { get; set; }
        [Parameter("tuple[]", "credentials", 3)]
        public virtual List<CredentialUpdateGen2> Credentials { get; set; }
    }



}
