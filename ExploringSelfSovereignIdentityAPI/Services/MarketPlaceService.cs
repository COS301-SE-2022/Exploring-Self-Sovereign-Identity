using ExploringSelfSovereignIdentityAPI.Models.Request;
using ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain;
using ExploringSelfSovereignIdentityAPI.Services.UserDataService;
using MediatR;
using Microsoft.Extensions.Configuration;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts.DeploymentHandlers;
using Nethereum.Web3;
using Nethereum.Web3.Accounts;
using Org.BouncyCastle.Asn1.Mozilla;
using Org.BouncyCastle.Asn1.Ocsp;
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Threading.Tasks;
using Attribute = ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain.Attribute;
using IUserDataService = ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain.IUserDataService;

namespace ExploringSelfSovereignIdentityAPI.Services
{
    public class MarketPlaceService : IMarketPlaceService
    {

        private static string url = "http://testchain.nethereum.com:8545";

        /*private static string privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
        static Web3 web3 = new Web3(new Nethereum.Web3.Accounts.Account(privateKey, 444444444500), url);*/

        private static string privateKey;
        private static Account acc;
        private static Web3 web3;

        private static IConfiguration configuration;

        private static ContractHandler contractHandler;

        private IUserDataService userData;

        public MarketPlaceService(IUserDataService userData, IConfiguration config)
        {
            this.userData = userData;
            configuration = config;
        }

        private async Task<ContractHandler> deploy()
        {
            privateKey = configuration["accPKMarketplace"];
            acc = new Nethereum.Web3.Accounts.Account(privateKey, 444444444500);

            web3 = new Web3(acc, url);
            web3.TransactionManager.UseLegacyAsDefault = true;

            var marketPlaceDeployment = new MarketPlaceDeployment();

            var transactionReceiptDeployment = await web3.Eth.GetContractDeploymentHandler<MarketPlaceDeployment>().SendRequestAndWaitForReceiptAsync(marketPlaceDeployment);
            var contractAddress = transactionReceiptDeployment.ContractAddress;
            
            return web3.Eth.GetContractHandler(contractAddress);
        }

        public async Task<string> addDataPack(AddDataPackRequest2 request)
        {

            if (contractHandler == null) contractHandler = await deploy();

            var addDataPackFunction = new AddDataPackFunction();
            addDataPackFunction.Request = new AddDataPackRequest();
            addDataPackFunction.Request.Id = request.Id;
            addDataPackFunction.Request.PricePerUnit = request.PricePerUnit;
            addDataPackFunction.Request.Organization = request.Organization;
            addDataPackFunction.Request.RequestedAttributes = request.RequestedAttributes;
            var addDataPackFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(addDataPackFunction);

            return "success";
        }

        public async Task<BuyDataOutputDTO2> buyData(BuyDataRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var buyDataFunction = new BuyDataFunction();
            buyDataFunction.Request = request;

            
            BuyDataOutputDTO buyDataFunctionTxnReceipt = await contractHandler.QueryDeserializingToObjectAsync<BuyDataFunction, BuyDataOutputDTO>(buyDataFunction);

            BuyDataOutputDTO2 ret = new BuyDataOutputDTO2();

            if (buyDataFunctionTxnReceipt != null)
            {
                if (buyDataFunctionTxnReceipt.ReturnValue1.Status == "success")
                {
                    //await userData.updateBalance(request.UserID, (int)buyDataFunctionTxnReceipt.ReturnValue1.Amount);
                }

                //buyDataFunction.Request.Attributes.ForEach(attr => Console.WriteLine("Here: " + attr.Name));

                ret.ReturnValue1 = new BuyDataResponse2();
                ret.ReturnValue1.Status = buyDataFunctionTxnReceipt.ReturnValue1.Status;
                ret.ReturnValue1.Amount = (int)buyDataFunctionTxnReceipt.ReturnValue1.Amount;

            }

            return ret;
        }

        public async Task<string> createOrganization(CreateOrgRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var createOrganizationFunction = new CreateOrganizationFunction();
            createOrganizationFunction.Request = request;
            var createOrganizationFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(createOrganizationFunction);

            return "success";
        }

        public async Task<GetOrganizationOutputDTO2> getOrganization(CreateOrgRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var getOrganizationFunction = new GetOrganizationFunction();
            getOrganizationFunction.Request = request;
            var getOrganizationOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetOrganizationFunction, GetOrganizationOutputDTO>(getOrganizationFunction);

            GetOrganizationOutputDTO2 ret = new GetOrganizationOutputDTO2();
            ret.ReturnValue1 = new OrganizationResponse2();

            ret.ReturnValue1.Id = getOrganizationOutputDTO.ReturnValue1.Id;
            ret.ReturnValue1.Balance = (int) getOrganizationOutputDTO.ReturnValue1.Balance;
            ret.ReturnValue1.Status = getOrganizationOutputDTO.ReturnValue1.Status;

            ret.ReturnValue1.Packs = new List<DataPackResponse2>();

            Console.WriteLine(getOrganizationOutputDTO.ReturnValue1.Packs.Count);

            for (int i=0; i< getOrganizationOutputDTO.ReturnValue1.Packs.Count; i++)
            {
                Console.WriteLine(getOrganizationOutputDTO.ReturnValue1.Packs[i].Received.Count);
                DataPackResponse2 p = new DataPackResponse2();
                p.Id = getOrganizationOutputDTO.ReturnValue1.Packs[i].Id;
                p.PricePerUnit = (int) getOrganizationOutputDTO.ReturnValue1.Packs[i].PricePerUnit;
                p.Received = getOrganizationOutputDTO.ReturnValue1.Packs[i].Received;

                ret.ReturnValue1.Packs.Add(p);
            }

            return ret;
        }

        public async Task<GetAllOrganizationsOutputDTO2> getAllOrganizations(string id)
        {

            var getAllOrganizationsFunction = new GetAllOrganizationsFunction();
            getAllOrganizationsFunction.Id = id;
            var temp = await contractHandler.QueryDeserializingToObjectAsync<GetAllOrganizationsFunction, GetAllOrganizationsOutputDTO>(getAllOrganizationsFunction);

            //var temp = await contractHandler.QueryDeserializingToObjectAsync<GetAllOrganizationsFunction, GetAllOrganizationsOutputDTO>();

            var ret = new GetAllOrganizationsOutputDTO2();
            ret.ReturnValue1 = new List<AllOrganizationResponse2>();

            for (int i=0; i<temp.ReturnValue1.Count; i++)
            {
                Console.WriteLine(temp.ReturnValue1[i].Id);
                Console.WriteLine(temp.ReturnValue1[i].Organization);

                AllOrganizationResponse2 p = new AllOrganizationResponse2();

                p.Id = temp.ReturnValue1[i].Id;
                p.PricePerUnit = (int) temp.ReturnValue1[i].PricePerUnit;
                p.Organization = temp.ReturnValue1[i].Organization;

                p.Attributes = temp.ReturnValue1[i].Attributes;
                
                ret.ReturnValue1.Add(p);
            }

            return ret;
        }
    }

    public partial class MarketPlaceDeployment : MarketPlaceDeploymentBase
    {
        public MarketPlaceDeployment() : base(BYTECODE) { }
        public MarketPlaceDeployment(string byteCode) : base(byteCode) { }
    }

    public class MarketPlaceDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "";
        public MarketPlaceDeploymentBase() : base(BYTECODE) { }
        public MarketPlaceDeploymentBase(string byteCode) : base(byteCode) { }

    }

    public partial class AddDataPackFunction : AddDataPackFunctionBase { }

    [Function("addDataPack")]
    public class AddDataPackFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual AddDataPackRequest Request { get; set; }
    }

    public partial class BuyDataFunction : BuyDataFunctionBase { }

    [Function("buyData", typeof(BuyDataOutputDTO))]
    public class BuyDataFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual BuyDataRequest Request { get; set; }
    }

    public partial class CreateOrganizationFunction : CreateOrganizationFunctionBase { }

    [Function("createOrganization")]
    public class CreateOrganizationFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual CreateOrgRequest Request { get; set; }
    }

    public partial class GetAllOrganizationsFunction : GetAllOrganizationsFunctionBase { }

    [Function("getAllOrganizations", typeof(GetAllOrganizationsOutputDTO))]
    public class GetAllOrganizationsFunctionBase : FunctionMessage
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
    }

    public partial class GetOrganizationFunction : GetOrganizationFunctionBase { }

    [Function("getOrganization", typeof(GetOrganizationOutputDTO))]
    public class GetOrganizationFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual CreateOrgRequest Request { get; set; }
    }



    public partial class BuyDataOutputDTO : BuyDataOutputDTOBase { }

    [FunctionOutput]
    public class BuyDataOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual BuyDataResponse ReturnValue1 { get; set; }
    }



    public partial class GetAllOrganizationsOutputDTO : GetAllOrganizationsOutputDTOBase { }

    [FunctionOutput]
    public class GetAllOrganizationsOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<AllOrganizationResponse> ReturnValue1 { get; set; }
    }

    public partial class GetOrganizationOutputDTO : GetOrganizationOutputDTOBase { }

    [FunctionOutput]
    public class GetOrganizationOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual OrganizationResponse ReturnValue1 { get; set; }
    }

    public partial class AddDataPackRequest : AddDataPackRequestBase { }

    public class AddDataPackRequestBase
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual BigInteger PricePerUnit { get; set; }
        [Parameter("string[]", "requestedAttributes", 4)]
        public virtual List<string> RequestedAttributes { get; set; }
    }

    public partial class BuyDataResponse : BuyDataResponseBase { }

    public class BuyDataResponseBase
    {
        [Parameter("string", "status", 1)]
        public virtual string Status { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class BuyDataRequest : BuyDataRequestBase { }

    public class BuyDataRequestBase
    {
        [Parameter("string", "userID", 1)]
        public virtual string UserID { get; set; }
        [Parameter("string", "organization", 2)]
        public virtual string Organization { get; set; }
        [Parameter("string", "dataPackID", 3)]
        public virtual string DataPackID { get; set; }
        [Parameter("tuple[]", "attributes", 4)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class CreateOrgRequest : CreateOrgRequestBase { }

    public class CreateOrgRequestBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("string", "password", 2)]
        public virtual string Password { get; set; }
    }

    public partial class AllOrganizationResponse : AllOrganizationResponseBase { }

    public class AllOrganizationResponseBase
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual BigInteger PricePerUnit { get; set; }
        [Parameter("string[]", "attributes", 4)]
        public virtual List<string> Attributes { get; set; }
    }

    public partial class DataPackReceivedRequest : DataPackReceivedRequestBase { }

    public class DataPackReceivedRequestBase
    {
        [Parameter("string", "userID", 1)]
        public virtual string UserID { get; set; }
        [Parameter("tuple[]", "attributes", 2)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class DataPackResponse : DataPackResponseBase { }

    public class DataPackResponseBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 2)]
        public virtual BigInteger PricePerUnit { get; set; }
        [Parameter("tuple[]", "received", 3)]
        public virtual List<DataPackReceivedRequest> Received { get; set; }
    }

    public partial class OrganizationResponse : OrganizationResponseBase { }

    public class OrganizationResponseBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "balance", 2)]
        public virtual BigInteger Balance { get; set; }
        [Parameter("string", "status", 3)]
        public virtual string Status { get; set; }
        [Parameter("tuple[]", "packs", 4)]
        public virtual List<DataPackResponse> Packs { get; set; }
    }




    public partial class GetAllOrganizationsOutputDTO2 : GetAllOrganizationsOutputDTOBase2 { }

    [FunctionOutput]
    public class GetAllOrganizationsOutputDTOBase2 : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<AllOrganizationResponse2> ReturnValue1 { get; set; }
    }

    public partial class AllOrganizationResponse2 : AllOrganizationResponseBase2 { }

    public class AllOrganizationResponseBase2
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual int PricePerUnit { get; set; }
        [Parameter("string[]", "attributes", 4)]
        public virtual List<string> Attributes { get; set; }
    }





    public partial class DataPackResponse2 : DataPackResponseBase2 { }

    public class DataPackResponseBase2
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 2)]
        public virtual int PricePerUnit { get; set; }
        [Parameter("tuple[]", "received", 3)]
        public virtual List<DataPackReceivedRequest> Received { get; set; }
    }
    public partial class GetOrganizationOutputDTO2 : GetOrganizationOutputDTOBase2 { }

    [FunctionOutput]
    public class GetOrganizationOutputDTOBase2 : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual OrganizationResponse2 ReturnValue1 { get; set; }
    }

    public partial class OrganizationResponse2 : OrganizationResponseBase2 { }

    public class OrganizationResponseBase2
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "balance", 2)]
        public virtual int Balance { get; set; }
        [Parameter("string", "status", 3)]
        public virtual string Status { get; set; }
        [Parameter("tuple[]", "packs", 4)]
        public virtual List<DataPackResponse2> Packs { get; set; }
    }

    public partial class AddDataPackRequest2 : AddDataPackRequestBase2 { }

    public class AddDataPackRequestBase2
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual int PricePerUnit { get; set; }
        [Parameter("string[]", "requestedAttributes", 4)]
        public virtual List<string> RequestedAttributes { get; set; }
    }

    public partial class BuyDataResponse2 : BuyDataResponseBase2 { }

    public class BuyDataResponseBase2
    {
        [Parameter("string", "status", 1)]
        public virtual string Status { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual int Amount { get; set; }
    }
    public partial class BuyDataOutputDTO2 : BuyDataOutputDTOBase2 { }

    [FunctionOutput]
    public class BuyDataOutputDTOBase2 : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual BuyDataResponse2 ReturnValue1 { get; set; }
    }
}
