using ExploringSelfSovereignIdentityAPI.Models.Request;
using ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain;
using ExploringSelfSovereignIdentityAPI.Services.UserDataService;
using MediatR;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts.DeploymentHandlers;
using Nethereum.Web3;
using Org.BouncyCastle.Asn1.Mozilla;
using Org.BouncyCastle.Asn1.Ocsp;
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Threading.Tasks;
using Attribute = ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain.Attribute;
using IUserDataService = ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain.IUserDataService;

namespace ExploringSelfSovereignIdentityAPI.Services
{
    public class MarketPlaceService : IMarketPlaceService
    {

        /*static string url = "http://127.0.0.1:8545";
        static string privateKey = "734674bd34f2476f15c6d5f6c8c1c7c92e465921e546771d088b958607531d10";
        private readonly string senderAddress = "0x8A1f48B91fbDC94b82E1997c2630466c5FaCf38b";
        private static string contractAddress = "0x7D6FAec0a4833Ad806EBCbe7d1BFe66caCF0a961";

        static Web3 web3 = new Web3(new Nethereum.Web3.Accounts.Account(privateKey), url);

        private ContractHandler contractHandler = web3.Eth.GetContractHandler(contractAddress);

        public MarketPlaceService()
        {
            web3.TransactionManager.UseLegacyAsDefault = true;
        }*/

        private static string url = "http://testchain.nethereum.com:8545";
        private static string privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
        static Web3 web3 = new Web3(new Nethereum.Web3.Accounts.Account(privateKey, 444444444500), url);

        private static ContractHandler contractHandler;

        private IUserDataService userData;

        public MarketPlaceService(IUserDataService userData)
        {
            this.userData = userData;
        }

        private async Task<ContractHandler> deploy()
        {
            var marketPlaceDeployment = new MarketPlaceDeployment();

            var transactionReceiptDeployment = await web3.Eth.GetContractDeploymentHandler<MarketPlaceDeployment>().SendRequestAndWaitForReceiptAsync(marketPlaceDeployment);
            var contractAddress = transactionReceiptDeployment.ContractAddress;
            
            return web3.Eth.GetContractHandler(contractAddress);
        }

        public async Task<string> addDataPack(AddDataPackRequest2 request)
        {

            if (contractHandler == null) contractHandler = await deploy();

            var addDataPackFunction = new AddDataPackFunction();
            addDataPackFunction.Request = new AddDataPackRequest();
            addDataPackFunction.Request.Id = request.Id;
            addDataPackFunction.Request.PricePerUnit = request.PricePerUnit;
            addDataPackFunction.Request.Organization = request.Organization;
            addDataPackFunction.Request.RequestedAttributes = request.RequestedAttributes;
            var addDataPackFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(addDataPackFunction);

            return "success";
        }

        public async Task<BuyDataOutputDTO2> buyData(BuyDataRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var buyDataFunction = new BuyDataFunction();
            buyDataFunction.Request = request;
            BuyDataOutputDTO buyDataFunctionTxnReceipt = await contractHandler.QueryDeserializingToObjectAsync<BuyDataFunction, BuyDataOutputDTO>(buyDataFunction);

            if (buyDataFunctionTxnReceipt.ReturnValue1.Status == "success")
            {
                await userData.updateBalance(request.UserID, (int) buyDataFunctionTxnReceipt.ReturnValue1.Amount);
            }

            BuyDataOutputDTO2 ret = new BuyDataOutputDTO2();
            ret.ReturnValue1 = new BuyDataResponse2();
            ret.ReturnValue1.Status = buyDataFunctionTxnReceipt.ReturnValue1.Status;
            ret.ReturnValue1.Amount = (int) buyDataFunctionTxnReceipt.ReturnValue1.Amount;

            return ret;
        }

        public async Task<string> createOrganization(CreateOrgRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var createOrganizationFunction = new CreateOrganizationFunction();
            createOrganizationFunction.Request = request;
            var createOrganizationFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(createOrganizationFunction);

            return "success";
        }

        public async Task<GetOrganizationOutputDTO2> getOrganization(CreateOrgRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var getOrganizationFunction = new GetOrganizationFunction();
            getOrganizationFunction.Request = request;
            var getOrganizationOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetOrganizationFunction, GetOrganizationOutputDTO>(getOrganizationFunction);

            GetOrganizationOutputDTO2 ret = new GetOrganizationOutputDTO2();
            ret.ReturnValue1 = new OrganizationResponse2();

            ret.ReturnValue1.Id = getOrganizationOutputDTO.ReturnValue1.Id;
            ret.ReturnValue1.Balance = (int) getOrganizationOutputDTO.ReturnValue1.Balance;
            ret.ReturnValue1.Status = getOrganizationOutputDTO.ReturnValue1.Status;

            ret.ReturnValue1.Packs = new List<DataPackResponse2>();

            for (int i=0; i< getOrganizationOutputDTO.ReturnValue1.Packs.Count; i++)
            {
                DataPackResponse2 p = new DataPackResponse2();
                p.Id = getOrganizationOutputDTO.ReturnValue1.Packs[i].Id;
                p.PricePerUnit = (int) getOrganizationOutputDTO.ReturnValue1.Packs[i].PricePerUnit;
                p.Received = getOrganizationOutputDTO.ReturnValue1.Packs[i].Received;

                ret.ReturnValue1.Packs.Add(p);
            }

            return ret;
        }
    }

    public partial class MarketPlaceDeployment : MarketPlaceDeploymentBase
    {
        public MarketPlaceDeployment() : base(BYTECODE) { }
        public MarketPlaceDeployment(string byteCode) : base(byteCode) { }
    }

    public class MarketPlaceDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "";
        public MarketPlaceDeploymentBase() : base(BYTECODE) { }
        public MarketPlaceDeploymentBase(string byteCode) : base(byteCode) { }

    }

    public partial class AddDataPackFunction : AddDataPackFunctionBase { }

    [Function("addDataPack")]
    public class AddDataPackFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual AddDataPackRequest Request { get; set; }
    }

    public partial class BuyDataFunction : BuyDataFunctionBase { }

    [Function("buyData", typeof(BuyDataOutputDTO))]
    public class BuyDataFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual BuyDataRequest Request { get; set; }
    }

    public partial class CreateOrganizationFunction : CreateOrganizationFunctionBase { }

    [Function("createOrganization")]
    public class CreateOrganizationFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual CreateOrgRequest Request { get; set; }
    }

    public partial class GetOrganizationFunction : GetOrganizationFunctionBase { }

    [Function("getOrganization", typeof(GetOrganizationOutputDTO))]
    public class GetOrganizationFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual CreateOrgRequest Request { get; set; }
    }



    public partial class BuyDataOutputDTO : BuyDataOutputDTOBase { }

    [FunctionOutput]
    public class BuyDataOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual BuyDataResponse ReturnValue1 { get; set; }
    }



    public partial class GetOrganizationOutputDTO : GetOrganizationOutputDTOBase { }

    [FunctionOutput]
    public class GetOrganizationOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual OrganizationResponse ReturnValue1 { get; set; }
    }

    public partial class AddDataPackRequest : AddDataPackRequestBase { }

    public class AddDataPackRequestBase
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual BigInteger PricePerUnit { get; set; }
        [Parameter("string[]", "requestedAttributes", 4)]
        public virtual List<string> RequestedAttributes { get; set; }
    }

    public partial class BuyDataResponse : BuyDataResponseBase { }

    public class BuyDataResponseBase
    {
        [Parameter("string", "status", 1)]
        public virtual string Status { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class BuyDataRequest : BuyDataRequestBase { }

    public class BuyDataRequestBase
    {
        [Parameter("string", "userID", 1)]
        public virtual string UserID { get; set; }
        [Parameter("string", "organization", 2)]
        public virtual string Organization { get; set; }
        [Parameter("string", "dataPackID", 3)]
        public virtual string DataPackID { get; set; }
        [Parameter("tuple[]", "attributes", 4)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class CreateOrgRequest : CreateOrgRequestBase { }

    public class CreateOrgRequestBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("string", "password", 2)]
        public virtual string Password { get; set; }
    }

    public partial class DataPackReceivedRequest : DataPackReceivedRequestBase { }

    public class DataPackReceivedRequestBase
    {
        [Parameter("string", "userID", 1)]
        public virtual string UserID { get; set; }
        [Parameter("tuple[]", "attributes", 2)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class DataPackResponse : DataPackResponseBase { }

    public class DataPackResponseBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 2)]
        public virtual BigInteger PricePerUnit { get; set; }
        [Parameter("tuple[]", "received", 3)]
        public virtual List<DataPackReceivedRequest> Received { get; set; }
    }

    public partial class OrganizationResponse : OrganizationResponseBase { }

    public class OrganizationResponseBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "balance", 2)]
        public virtual BigInteger Balance { get; set; }
        [Parameter("string", "status", 3)]
        public virtual string Status { get; set; }
        [Parameter("tuple[]", "packs", 4)]
        public virtual List<DataPackResponse> Packs { get; set; }
    }





    public partial class DataPackResponse2 : DataPackResponseBase2 { }

    public class DataPackResponseBase2
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 2)]
        public virtual int PricePerUnit { get; set; }
        [Parameter("tuple[]", "received", 3)]
        public virtual List<DataPackReceivedRequest> Received { get; set; }
    }
    public partial class GetOrganizationOutputDTO2 : GetOrganizationOutputDTOBase2 { }

    [FunctionOutput]
    public class GetOrganizationOutputDTOBase2 : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual OrganizationResponse2 ReturnValue1 { get; set; }
    }

    public partial class OrganizationResponse2 : OrganizationResponseBase2 { }

    public class OrganizationResponseBase2
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "balance", 2)]
        public virtual int Balance { get; set; }
        [Parameter("string", "status", 3)]
        public virtual string Status { get; set; }
        [Parameter("tuple[]", "packs", 4)]
        public virtual List<DataPackResponse2> Packs { get; set; }
    }

    public partial class AddDataPackRequest2 : AddDataPackRequestBase2 { }

    public class AddDataPackRequestBase2
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual int PricePerUnit { get; set; }
        [Parameter("string[]", "requestedAttributes", 4)]
        public virtual List<string> RequestedAttributes { get; set; }
    }

    public partial class BuyDataResponse2 : BuyDataResponseBase2 { }

    public class BuyDataResponseBase2
    {
        [Parameter("string", "status", 1)]
        public virtual string Status { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual int Amount { get; set; }
    }
    public partial class BuyDataOutputDTO2 : BuyDataOutputDTOBase2 { }

    [FunctionOutput]
    public class BuyDataOutputDTOBase2 : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual BuyDataResponse2 ReturnValue1 { get; set; }
    }
}
