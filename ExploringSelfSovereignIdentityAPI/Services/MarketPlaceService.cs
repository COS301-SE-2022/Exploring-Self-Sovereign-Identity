using ExploringSelfSovereignIdentityAPI.Models.Request;
using ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain;
using ExploringSelfSovereignIdentityAPI.Services.UserDataService;
using MediatR;
using Microsoft.Extensions.Configuration;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts.DeploymentHandlers;
using Nethereum.Web3;
using Nethereum.Web3.Accounts;
using Org.BouncyCastle.Asn1.Mozilla;
using Org.BouncyCastle.Asn1.Ocsp;
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Threading.Tasks;
using Attribute = ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain.Attribute;
using IUserDataService = ExploringSelfSovereignIdentityAPI.Services.NetheriumBlockChain.IUserDataService;

namespace ExploringSelfSovereignIdentityAPI.Services
{
    public class MarketPlaceService : IMarketPlaceService
    {

        private static string url = "http://testchain.nethereum.com:8545";

        /*private static string privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
        static Web3 web3 = new Web3(new Nethereum.Web3.Accounts.Account(privateKey, 444444444500), url);*/

        private static string privateKey;
        private static Account acc;
        private static Web3 web3;

        private static IConfiguration configuration;

        private static ContractHandler contractHandler;

        private IUserDataService userData;

        public MarketPlaceService(IUserDataService userData, IConfiguration config)
        {
            this.userData = userData;
            configuration = config;
        }

        private async Task<ContractHandler> deploy()
        {
            privateKey = configuration["accountPrivateKey"];
            acc = new Nethereum.Web3.Accounts.Account(privateKey, 444444444500);

            web3 = new Web3(acc, url);
            web3.TransactionManager.UseLegacyAsDefault = true;

            var marketPlaceDeployment = new MarketPlaceDeployment();

            var transactionReceiptDeployment = await web3.Eth.GetContractDeploymentHandler<MarketPlaceDeployment>().SendRequestAndWaitForReceiptAsync(marketPlaceDeployment);
            var contractAddress = transactionReceiptDeployment.ContractAddress;
            
            return web3.Eth.GetContractHandler(contractAddress);
        }

        public async Task<string> addDataPack(AddDataPackRequest2 request)
        {

            if (contractHandler == null) contractHandler = await deploy();

            var addDataPackFunction = new AddDataPackFunction();
            addDataPackFunction.Request = new AddDataPackRequest();
            addDataPackFunction.Request.Id = request.Id;
            addDataPackFunction.Request.PricePerUnit = request.PricePerUnit;
            addDataPackFunction.Request.Organization = request.Organization;
            addDataPackFunction.Request.RequestedAttributes = request.RequestedAttributes;
            var addDataPackFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(addDataPackFunction);

            return "success";
        }

        public async Task<BuyDataOutputDTO2> buyData(BuyDataRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var buyDataFunction = new BuyDataFunction();
            buyDataFunction.Request = request;
            BuyDataOutputDTO buyDataFunctionTxnReceipt = await contractHandler.QueryDeserializingToObjectAsync<BuyDataFunction, BuyDataOutputDTO>(buyDataFunction);

            if (buyDataFunctionTxnReceipt.ReturnValue1.Status == "success")
            {
                await userData.updateBalance(request.UserID, (int) buyDataFunctionTxnReceipt.ReturnValue1.Amount);
            }

            BuyDataOutputDTO2 ret = new BuyDataOutputDTO2();
            ret.ReturnValue1 = new BuyDataResponse2();
            ret.ReturnValue1.Status = buyDataFunctionTxnReceipt.ReturnValue1.Status;
            ret.ReturnValue1.Amount = (int) buyDataFunctionTxnReceipt.ReturnValue1.Amount;

            return ret;
        }

        public async Task<string> createOrganization(CreateOrgRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var createOrganizationFunction = new CreateOrganizationFunction();
            createOrganizationFunction.Request = request;
            var createOrganizationFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(createOrganizationFunction);

            return "success";
        }

        public async Task<GetOrganizationOutputDTO2> getOrganization(CreateOrgRequest request)
        {
            if (contractHandler == null) contractHandler = await deploy();

            var getOrganizationFunction = new GetOrganizationFunction();
            getOrganizationFunction.Request = request;
            var getOrganizationOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetOrganizationFunction, GetOrganizationOutputDTO>(getOrganizationFunction);

            GetOrganizationOutputDTO2 ret = new GetOrganizationOutputDTO2();
            ret.ReturnValue1 = new OrganizationResponse2();

            ret.ReturnValue1.Id = getOrganizationOutputDTO.ReturnValue1.Id;
            ret.ReturnValue1.Balance = (int) getOrganizationOutputDTO.ReturnValue1.Balance;
            ret.ReturnValue1.Status = getOrganizationOutputDTO.ReturnValue1.Status;

            ret.ReturnValue1.Packs = new List<DataPackResponse2>();

            for (int i=0; i< getOrganizationOutputDTO.ReturnValue1.Packs.Count; i++)
            {
                DataPackResponse2 p = new DataPackResponse2();
                p.Id = getOrganizationOutputDTO.ReturnValue1.Packs[i].Id;
                p.PricePerUnit = (int) getOrganizationOutputDTO.ReturnValue1.Packs[i].PricePerUnit;
                p.Received = getOrganizationOutputDTO.ReturnValue1.Packs[i].Received;

                ret.ReturnValue1.Packs.Add(p);
            }

            return ret;
        }

        public async Task<GetAllOrganizationsOutputDTO2> getAllOrganizations()
        {
            var temp = await contractHandler.QueryDeserializingToObjectAsync<GetAllOrganizationsFunction, GetAllOrganizationsOutputDTO>();

            var ret = new GetAllOrganizationsOutputDTO2();
            ret.ReturnValue1 = new List<AllOrganizationResponse2>();

            for (int i=0; i<temp.ReturnValue1.Count; i++)
            {
                Console.WriteLine(temp.ReturnValue1[i].Id);
                Console.WriteLine(temp.ReturnValue1[i].Organization);

                AllOrganizationResponse2 p = new AllOrganizationResponse2();

                p.Id = temp.ReturnValue1[i].Id;
                p.PricePerUnit = (int) temp.ReturnValue1[i].PricePerUnit;
                p.Organization = temp.ReturnValue1[i].Organization;

                p.Attributes = temp.ReturnValue1[i].Attributes;
                
                ret.ReturnValue1.Add(p);
            }

            return ret;
        }
    }

    public partial class MarketPlaceDeployment : MarketPlaceDeploymentBase
    {
        public MarketPlaceDeployment() : base(BYTECODE) { }
        public MarketPlaceDeployment(string byteCode) : base(byteCode) { }
    }

    public class MarketPlaceDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "0x608060405234801561001057600080fd5b50612ba6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063086ed9381461005c57806317d104f81461007a57806373001f8014610096578063804a18b8146100c65780638d0f9c68146100f6575b600080fd5b610064610112565b6040516100719190611c47565b60405180910390f35b610094600480360381019061008f9190611f9a565b610657565b005b6100b060048036038101906100ab919061206b565b61085a565b6040516100bd919061244a565b60405180910390f35b6100e060048036038101906100db91906126bd565b6111aa565b6040516100ed9190612743565b60405180910390f35b610110600480360381019061010b919061206b565b6117af565b005b6060600060015467ffffffffffffffff81111561013257610131611c82565b5b60405190808252806020026020018201604052801561016b57816020015b6101586118e1565b8152602001906001900390816101505790505b509050606060005b60005481101561064e5760026000828152602001908152602001600020805461019b90612794565b80601f01602080910402602001604051908101604052809291908181526020018280546101c790612794565b80156102145780601f106101e957610100808354040283529160200191610214565b820191906000526020600020905b8154815290600101906020018083116101f757829003601f168201915b50505050509150600060038360405161022d9190612801565b908152602001604051809103902060030154905060005b818110156106395760038460405161025c9190612801565b9081526020016040518091039020600001805461027890612794565b80601f01602080910402602001604051908101604052809291908181526020018280546102a490612794565b80156102f15780601f106102c6576101008083540402835291602001916102f1565b820191906000526020600020905b8154815290600101906020018083116102d457829003601f168201915b505050505085828151811061030957610308612818565b5b6020026020010151600001819052506003846040516103289190612801565b90815260200160405180910390206004016000828152602001908152602001600020600001805461035890612794565b80601f016020809104026020016040519081016040528092919081815260200182805461038490612794565b80156103d15780601f106103a6576101008083540402835291602001916103d1565b820191906000526020600020905b8154815290600101906020018083116103b457829003601f168201915b50505050508582815181106103e9576103e8612818565b5b6020026020010151602001819052506003846040516104089190612801565b908152602001604051809103902060040160008281526020019081526020016000206001015485828151811061044157610440612818565b5b6020026020010151604001818152505060006003856040516104639190612801565b908152602001604051809103902060040160008381526020019081526020016000206002015490508067ffffffffffffffff8111156104a5576104a4611c82565b5b6040519080825280602002602001820160405280156104d857816020015b60608152602001906001900390816104c35790505b508683815181106104ec576104eb612818565b5b60200260200101516060018190525060005b81811015610624576003866040516105169190612801565b908152602001604051809103902060040160008481526020019081526020016000206003016000828152602001908152602001600020805461055790612794565b80601f016020809104026020016040519081016040528092919081815260200182805461058390612794565b80156105d05780601f106105a5576101008083540402835291602001916105d0565b820191906000526020600020905b8154815290600101906020018083116105b357829003601f168201915b50505050508784815181106105e8576105e7612818565b5b602002602001015160600151828151811061060657610605612818565b5b6020026020010181905250808061061c90612876565b9150506104fe565b5050808061063190612876565b915050610244565b5050808061064690612876565b915050610173565b50819250505090565b60006003826000015160405161066d9190612801565b9081526020016040518091039020600301600081548092919061068f90612876565b9190505590508160200151600383600001516040516106ae9190612801565b9081526020016040518091039020600401600083815260200190815260200160002060000190816106df9190612a6a565b508160400151600383600001516040516106f99190612801565b90815260200160405180910390206004016000838152602001908152602001600020600101819055508160600151516003836000015160405161073c9190612801565b908152602001604051809103902060040160008381526020019081526020016000206002018190555060006003836000015160405161077b9190612801565b908152602001604051809103902060040160008381526020019081526020016000206004018190555060005b82606001515181101561083d57826060015181815181106107cb576107ca612818565b5b6020026020010151600384600001516040516107e79190612801565b90815260200160405180910390206004016000848152602001908152602001600020600301600083815260200190815260200160002090816108299190612a6a565b50808061083590612876565b9150506107a7565b506001600081548092919061085190612876565b91905055505050565b610862611909565b61086a611909565b6109258360200151600385600001516040516108869190612801565b908152602001604051809103902060010180546108a290612794565b80601f01602080910402602001604051908101604052809291908181526020018280546108ce90612794565b801561091b5780601f106108f05761010080835404028352916020019161091b565b820191906000526020600020905b8154815290600101906020018083116108fe57829003601f168201915b50505050506118b6565b610970576040518060400160405280600681526020017f6661696c656400000000000000000000000000000000000000000000000000008152508160400181905250809150506111a5565b826000015181600001819052506040518060400160405280600781526020017f73756363657373000000000000000000000000000000000000000000000000008152508160400181905250600383600001516040516109cf9190612801565b908152602001604051809103902060020154816020018181525050600060038460000151604051610a009190612801565b90815260200160405180910390206003015490508067ffffffffffffffff811115610a2e57610a2d611c82565b5b604051908082528060200260200182016040528015610a6757816020015b610a54611931565b815260200190600190039081610a4c5790505b50826060018190525060005b8181101561119e5760038560000151604051610a8f9190612801565b908152602001604051809103902060040160008281526020019081526020016000206000018054610abf90612794565b80601f0160208091040260200160405190810160405280929190818152602001828054610aeb90612794565b8015610b385780601f10610b0d57610100808354040283529160200191610b38565b820191906000526020600020905b815481529060010190602001808311610b1b57829003601f168201915b505050505083606001518281518110610b5457610b53612818565b5b60200260200101516000018190525060038560000151604051610b779190612801565b908152602001604051809103902060040160008281526020019081526020016000206001015483606001518281518110610bb457610bb3612818565b5b6020026020010151602001818152505060038560000151604051610bd89190612801565b908152602001604051809103902060040160008281526020019081526020016000206004015467ffffffffffffffff811115610c1757610c16611c82565b5b604051908082528060200260200182016040528015610c5057816020015b610c3d611952565b815260200190600190039081610c355790505b5083606001518281518110610c6857610c67612818565b5b60200260200101516040018190525060005b60038660000151604051610c8e9190612801565b908152602001604051809103902060040160008381526020019081526020016000206004015481101561118a5760038660000151604051610ccf9190612801565b9081526020016040518091039020600401600083815260200190815260200160002060050160008281526020019081526020016000206000018054610d1390612794565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3f90612794565b8015610d8c5780601f10610d6157610100808354040283529160200191610d8c565b820191906000526020600020905b815481529060010190602001808311610d6f57829003601f168201915b505050505084606001518381518110610da857610da7612818565b5b6020026020010151604001518281518110610dc657610dc5612818565b5b602002602001015160000181905250600060038760000151604051610deb9190612801565b9081526020016040518091039020600401600084815260200190815260200160002060050160008381526020019081526020016000206001015490508067ffffffffffffffff811115610e4157610e40611c82565b5b604051908082528060200260200182016040528015610e7a57816020015b610e6761196c565b815260200190600190039081610e5f5790505b5085606001518481518110610e9257610e91612818565b5b6020026020010151604001518381518110610eb057610eaf612818565b5b60200260200101516020018190525060005b818110156111755760038860000151604051610ede9190612801565b90815260200160405180910390206004016000858152602001908152602001600020600501600084815260200190815260200160002060020160008281526020019081526020016000206000018054610f3690612794565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6290612794565b8015610faf5780601f10610f8457610100808354040283529160200191610faf565b820191906000526020600020905b815481529060010190602001808311610f9257829003601f168201915b505050505086606001518581518110610fcb57610fca612818565b5b6020026020010151604001518481518110610fe957610fe8612818565b5b602002602001015160200151828151811061100757611006612818565b5b6020026020010151600001819052506003886000015160405161102a9190612801565b9081526020016040518091039020600401600085815260200190815260200160002060050160008481526020019081526020016000206002016000828152602001908152602001600020600101805461108290612794565b80601f01602080910402602001604051908101604052809291908181526020018280546110ae90612794565b80156110fb5780601f106110d0576101008083540402835291602001916110fb565b820191906000526020600020905b8154815290600101906020018083116110de57829003601f168201915b50505050508660600151858151811061111757611116612818565b5b602002602001015160400151848151811061113557611134612818565b5b602002602001015160200151828151811061115357611152612818565b5b602002602001015160200181905250808061116d90612876565b915050610ec2565b5050808061118290612876565b915050610c7a565b50808061119690612876565b915050610a73565b5081925050505b919050565b6111b2611986565b6111ba611986565b60005b600384602001516040516111d19190612801565b9081526020016040518091039020600301548110156117a4576112b9600385602001516040516112019190612801565b90815260200160405180910390206004016000838152602001908152602001600020600001805461123190612794565b80601f016020809104026020016040519081016040528092919081815260200182805461125d90612794565b80156112aa5780601f1061127f576101008083540402835291602001916112aa565b820191906000526020600020905b81548152906001019060200180831161128d57829003601f168201915b505050505085604001516118b6565b156117915760005b600385602001516040516112d59190612801565b9081526020016040518091039020600401600083815260200190815260200160002060040154811015611446576113e5600386602001516040516113199190612801565b908152602001604051809103902060040160008481526020019081526020016000206005016000838152602001908152602001600020600001805461135d90612794565b80601f016020809104026020016040519081016040528092919081815260200182805461138990612794565b80156113d65780601f106113ab576101008083540402835291602001916113d6565b820191906000526020600020905b8154815290600101906020018083116113b957829003601f168201915b505050505086600001516118b6565b15611433576040518060400160405280600681526020017f6661696c6564000000000000000000000000000000000000000000000000000081525083600001819052508293505050506117aa565b808061143e90612876565b9150506112c1565b5060006003856020015160405161145d9190612801565b90815260200160405180910390206004016000838152602001908152602001600020600401600081548092919061149390612876565b9190505590508460000151600386602001516040516114b29190612801565b90815260200160405180910390206004016000848152602001908152602001600020600501600083815260200190815260200160002060000190816114f79190612a6a565b50846060015151600386602001516040516115129190612801565b9081526020016040518091039020600401600084815260200190815260200160002060050160008381526020019081526020016000206001018190555060005b856060015151811015611694578560600151818151811061157657611575612818565b5b602002602001015160000151600387602001516040516115969190612801565b908152602001604051809103902060040160008581526020019081526020016000206005016000848152602001908152602001600020600201600083815260200190815260200160002060000190816115ef9190612a6a565b508560600151818151811061160757611606612818565b5b602002602001015160200151600387602001516040516116279190612801565b908152602001604051809103902060040160008581526020019081526020016000206005016000848152602001908152602001600020600201600083815260200190815260200160002060010190816116809190612a6a565b50808061168c90612876565b915050611552565b506040518060400160405280600781526020017f73756363657373000000000000000000000000000000000000000000000000008152508360000181905250600385602001516040516116e79190612801565b90815260200160405180910390206004016000838152602001908152602001600020600101548360200181815250506003856020015160405161172a9190612801565b9081526020016040518091039020600401600083815260200190815260200160002060010154600386602001516040516117649190612801565b908152602001604051809103902060020160008282546117849190612b3c565b92505081905550506117a4565b808061179c90612876565b9150506111bd565b50809150505b919050565b8060000151600382600001516040516117c89190612801565b908152602001604051809103902060000190816117e59190612a6a565b508060200151600382600001516040516117ff9190612801565b9081526020016040518091039020600101908161181c9190612a6a565b506000600382600001516040516118339190612801565b90815260200160405180910390206003018190555060646003826000015160405161185e9190612801565b908152602001604051809103902060020181905550600080600081548092919061188790612876565b91905055905081600001516002600083815260200190815260200160002090816118b19190612a6a565b505050565b600081805190602001208380519060200120036118d657600190506118db565b600090505b92915050565b6040518060800160405280606081526020016060815260200160008152602001606081525090565b6040518060800160405280606081526020016000815260200160608152602001606081525090565b60405180606001604052806060815260200160008152602001606081525090565b604051806040016040528060608152602001606081525090565b604051806040016040528060608152602001606081525090565b604051806040016040528060608152602001600081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a065780820151818401526020810190506119eb565b83811115611a15576000848401525b50505050565b6000601f19601f8301169050919050565b6000611a37826119cc565b611a4181856119d7565b9350611a518185602086016119e8565b611a5a81611a1b565b840191505092915050565b6000819050919050565b611a7881611a65565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611ab68383611a2c565b905092915050565b6000602082019050919050565b6000611ad682611a7e565b611ae08185611a89565b935083602082028501611af285611a9a565b8060005b85811015611b2e5784840389528151611b0f8582611aaa565b9450611b1a83611abe565b925060208a01995050600181019050611af6565b50829750879550505050505092915050565b60006080830160008301518482036000860152611b5d8282611a2c565b91505060208301518482036020860152611b778282611a2c565b9150506040830151611b8c6040860182611a6f565b5060608301518482036060860152611ba48282611acb565b9150508091505092915050565b6000611bbd8383611b40565b905092915050565b6000602082019050919050565b6000611bdd826119a0565b611be781856119ab565b935083602082028501611bf9856119bc565b8060005b85811015611c355784840389528151611c168582611bb1565b9450611c2183611bc5565b925060208a01995050600181019050611bfd565b50829750879550505050505092915050565b60006020820190508181036000830152611c618184611bd2565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611cba82611a1b565b810181811067ffffffffffffffff82111715611cd957611cd8611c82565b5b80604052505050565b6000611cec611c69565b9050611cf88282611cb1565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611d2757611d26611c82565b5b611d3082611a1b565b9050602081019050919050565b82818337600083830152505050565b6000611d5f611d5a84611d0c565b611ce2565b905082815260208101848484011115611d7b57611d7a611d07565b5b611d86848285611d3d565b509392505050565b600082601f830112611da357611da2611d02565b5b8135611db3848260208601611d4c565b91505092915050565b611dc581611a65565b8114611dd057600080fd5b50565b600081359050611de281611dbc565b92915050565b600067ffffffffffffffff821115611e0357611e02611c82565b5b602082029050602081019050919050565b600080fd5b6000611e2c611e2784611de8565b611ce2565b90508083825260208201905060208402830185811115611e4f57611e4e611e14565b5b835b81811015611e9657803567ffffffffffffffff811115611e7457611e73611d02565b5b808601611e818982611d8e565b85526020850194505050602081019050611e51565b5050509392505050565b600082601f830112611eb557611eb4611d02565b5b8135611ec5848260208601611e19565b91505092915050565b600060808284031215611ee457611ee3611c7d565b5b611eee6080611ce2565b9050600082013567ffffffffffffffff811115611f0e57611f0d611cfd565b5b611f1a84828501611d8e565b600083015250602082013567ffffffffffffffff811115611f3e57611f3d611cfd565b5b611f4a84828501611d8e565b6020830152506040611f5e84828501611dd3565b604083015250606082013567ffffffffffffffff811115611f8257611f81611cfd565b5b611f8e84828501611ea0565b60608301525092915050565b600060208284031215611fb057611faf611c73565b5b600082013567ffffffffffffffff811115611fce57611fcd611c78565b5b611fda84828501611ece565b91505092915050565b600060408284031215611ff957611ff8611c7d565b5b6120036040611ce2565b9050600082013567ffffffffffffffff81111561202357612022611cfd565b5b61202f84828501611d8e565b600083015250602082013567ffffffffffffffff81111561205357612052611cfd565b5b61205f84828501611d8e565b60208301525092915050565b60006020828403121561208157612080611c73565b5b600082013567ffffffffffffffff81111561209f5761209e611c78565b5b6120ab84828501611fe3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060408301600083015184820360008601526121558282611a2c565b9150506020830151848203602086015261216f8282611a2c565b9150508091505092915050565b60006121888383612138565b905092915050565b6000602082019050919050565b60006121a88261210c565b6121b28185612117565b9350836020820285016121c485612128565b8060005b8581101561220057848403895281516121e1858261217c565b94506121ec83612190565b925060208a019950506001810190506121c8565b50829750879550505050505092915050565b6000604083016000830151848203600086015261222f8282611a2c565b91505060208301518482036020860152612249828261219d565b9150508091505092915050565b60006122628383612212565b905092915050565b6000602082019050919050565b6000612282826120e0565b61228c81856120eb565b93508360208202850161229e856120fc565b8060005b858110156122da57848403895281516122bb8582612256565b94506122c68361226a565b925060208a019950506001810190506122a2565b50829750879550505050505092915050565b600060608301600083015184820360008601526123098282611a2c565b915050602083015161231e6020860182611a6f565b50604083015184820360408601526123368282612277565b9150508091505092915050565b600061234f83836122ec565b905092915050565b6000602082019050919050565b600061236f826120b4565b61237981856120bf565b93508360208202850161238b856120d0565b8060005b858110156123c757848403895281516123a88582612343565b94506123b383612357565b925060208a0199505060018101905061238f565b50829750879550505050505092915050565b600060808301600083015184820360008601526123f68282611a2c565b915050602083015161240b6020860182611a6f565b50604083015184820360408601526124238282611a2c565b9150506060830151848203606086015261243d8282612364565b9150508091505092915050565b6000602082019050818103600083015261246481846123d9565b905092915050565b600067ffffffffffffffff82111561248757612486611c82565b5b602082029050602081019050919050565b6000604082840312156124ae576124ad611c7d565b5b6124b86040611ce2565b9050600082013567ffffffffffffffff8111156124d8576124d7611cfd565b5b6124e484828501611d8e565b600083015250602082013567ffffffffffffffff81111561250857612507611cfd565b5b61251484828501611d8e565b60208301525092915050565b600061253361252e8461246c565b611ce2565b9050808382526020820190506020840283018581111561255657612555611e14565b5b835b8181101561259d57803567ffffffffffffffff81111561257b5761257a611d02565b5b8086016125888982612498565b85526020850194505050602081019050612558565b5050509392505050565b600082601f8301126125bc576125bb611d02565b5b81356125cc848260208601612520565b91505092915050565b6000608082840312156125eb576125ea611c7d565b5b6125f56080611ce2565b9050600082013567ffffffffffffffff81111561261557612614611cfd565b5b61262184828501611d8e565b600083015250602082013567ffffffffffffffff81111561264557612644611cfd565b5b61265184828501611d8e565b602083015250604082013567ffffffffffffffff81111561267557612674611cfd565b5b61268184828501611d8e565b604083015250606082013567ffffffffffffffff8111156126a5576126a4611cfd565b5b6126b1848285016125a7565b60608301525092915050565b6000602082840312156126d3576126d2611c73565b5b600082013567ffffffffffffffff8111156126f1576126f0611c78565b5b6126fd848285016125d5565b91505092915050565b600060408301600083015184820360008601526127238282611a2c565b91505060208301516127386020860182611a6f565b508091505092915050565b6000602082019050818103600083015261275d8184612706565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127ac57607f821691505b6020821081036127bf576127be612765565b5b50919050565b600081905092915050565b60006127db826119cc565b6127e581856127c5565b93506127f58185602086016119e8565b80840191505092915050565b600061280d82846127d0565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061288182611a65565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128b3576128b2612847565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826128e3565b61292a86836128e3565b95508019841693508086168417925050509392505050565b6000819050919050565b600061296761296261295d84611a65565b612942565b611a65565b9050919050565b6000819050919050565b6129818361294c565b61299561298d8261296e565b8484546128f0565b825550505050565b600090565b6129aa61299d565b6129b5818484612978565b505050565b5b818110156129d9576129ce6000826129a2565b6001810190506129bb565b5050565b601f821115612a1e576129ef816128be565b6129f8846128d3565b81016020851015612a07578190505b612a1b612a13856128d3565b8301826129ba565b50505b505050565b600082821c905092915050565b6000612a4160001984600802612a23565b1980831691505092915050565b6000612a5a8383612a30565b9150826002028217905092915050565b612a73826119cc565b67ffffffffffffffff811115612a8c57612a8b611c82565b5b612a968254612794565b612aa18282856129dd565b600060209050601f831160018114612ad45760008415612ac2578287015190505b612acc8582612a4e565b865550612b34565b601f198416612ae2866128be565b60005b82811015612b0a57848901518255600182019150602085019450602081019050612ae5565b86831015612b275784890151612b23601f891682612a30565b8355505b6001600288020188555050505b505050505050565b6000612b4782611a65565b9150612b5283611a65565b925082821015612b6557612b64612847565b5b82820390509291505056fea2646970667358221220d78a3408a76dc25427f7a20b6d0be18fa5eb25e820192dc64bd8b2ef846d773464736f6c634300080f0033";
        public MarketPlaceDeploymentBase() : base(BYTECODE) { }
        public MarketPlaceDeploymentBase(string byteCode) : base(byteCode) { }

    }

    public partial class AddDataPackFunction : AddDataPackFunctionBase { }

    [Function("addDataPack")]
    public class AddDataPackFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual AddDataPackRequest Request { get; set; }
    }

    public partial class BuyDataFunction : BuyDataFunctionBase { }

    [Function("buyData", typeof(BuyDataOutputDTO))]
    public class BuyDataFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual BuyDataRequest Request { get; set; }
    }

    public partial class CreateOrganizationFunction : CreateOrganizationFunctionBase { }

    [Function("createOrganization")]
    public class CreateOrganizationFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual CreateOrgRequest Request { get; set; }
    }

    public partial class GetAllOrganizationsFunction : GetAllOrganizationsFunctionBase { }

    [Function("getAllOrganizations", typeof(GetAllOrganizationsOutputDTO))]
    public class GetAllOrganizationsFunctionBase : FunctionMessage
    {

    }

    public partial class GetOrganizationFunction : GetOrganizationFunctionBase { }

    [Function("getOrganization", typeof(GetOrganizationOutputDTO))]
    public class GetOrganizationFunctionBase : FunctionMessage
    {
        [Parameter("tuple", "request", 1)]
        public virtual CreateOrgRequest Request { get; set; }
    }



    public partial class BuyDataOutputDTO : BuyDataOutputDTOBase { }

    [FunctionOutput]
    public class BuyDataOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual BuyDataResponse ReturnValue1 { get; set; }
    }



    public partial class GetAllOrganizationsOutputDTO : GetAllOrganizationsOutputDTOBase { }

    [FunctionOutput]
    public class GetAllOrganizationsOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<AllOrganizationResponse> ReturnValue1 { get; set; }
    }

    public partial class GetOrganizationOutputDTO : GetOrganizationOutputDTOBase { }

    [FunctionOutput]
    public class GetOrganizationOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual OrganizationResponse ReturnValue1 { get; set; }
    }

    public partial class AddDataPackRequest : AddDataPackRequestBase { }

    public class AddDataPackRequestBase
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual BigInteger PricePerUnit { get; set; }
        [Parameter("string[]", "requestedAttributes", 4)]
        public virtual List<string> RequestedAttributes { get; set; }
    }

    public partial class BuyDataResponse : BuyDataResponseBase { }

    public class BuyDataResponseBase
    {
        [Parameter("string", "status", 1)]
        public virtual string Status { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class BuyDataRequest : BuyDataRequestBase { }

    public class BuyDataRequestBase
    {
        [Parameter("string", "userID", 1)]
        public virtual string UserID { get; set; }
        [Parameter("string", "organization", 2)]
        public virtual string Organization { get; set; }
        [Parameter("string", "dataPackID", 3)]
        public virtual string DataPackID { get; set; }
        [Parameter("tuple[]", "attributes", 4)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class CreateOrgRequest : CreateOrgRequestBase { }

    public class CreateOrgRequestBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("string", "password", 2)]
        public virtual string Password { get; set; }
    }

    public partial class AllOrganizationResponse : AllOrganizationResponseBase { }

    public class AllOrganizationResponseBase
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual BigInteger PricePerUnit { get; set; }
        [Parameter("string[]", "attributes", 4)]
        public virtual List<string> Attributes { get; set; }
    }

    public partial class DataPackReceivedRequest : DataPackReceivedRequestBase { }

    public class DataPackReceivedRequestBase
    {
        [Parameter("string", "userID", 1)]
        public virtual string UserID { get; set; }
        [Parameter("tuple[]", "attributes", 2)]
        public virtual List<Attribute> Attributes { get; set; }
    }

    public partial class DataPackResponse : DataPackResponseBase { }

    public class DataPackResponseBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 2)]
        public virtual BigInteger PricePerUnit { get; set; }
        [Parameter("tuple[]", "received", 3)]
        public virtual List<DataPackReceivedRequest> Received { get; set; }
    }

    public partial class OrganizationResponse : OrganizationResponseBase { }

    public class OrganizationResponseBase
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "balance", 2)]
        public virtual BigInteger Balance { get; set; }
        [Parameter("string", "status", 3)]
        public virtual string Status { get; set; }
        [Parameter("tuple[]", "packs", 4)]
        public virtual List<DataPackResponse> Packs { get; set; }
    }




    public partial class GetAllOrganizationsOutputDTO2 : GetAllOrganizationsOutputDTOBase2 { }

    [FunctionOutput]
    public class GetAllOrganizationsOutputDTOBase2 : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<AllOrganizationResponse2> ReturnValue1 { get; set; }
    }

    public partial class AllOrganizationResponse2 : AllOrganizationResponseBase2 { }

    public class AllOrganizationResponseBase2
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual int PricePerUnit { get; set; }
        [Parameter("string[]", "attributes", 4)]
        public virtual List<string> Attributes { get; set; }
    }





    public partial class DataPackResponse2 : DataPackResponseBase2 { }

    public class DataPackResponseBase2
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 2)]
        public virtual int PricePerUnit { get; set; }
        [Parameter("tuple[]", "received", 3)]
        public virtual List<DataPackReceivedRequest> Received { get; set; }
    }
    public partial class GetOrganizationOutputDTO2 : GetOrganizationOutputDTOBase2 { }

    [FunctionOutput]
    public class GetOrganizationOutputDTOBase2 : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual OrganizationResponse2 ReturnValue1 { get; set; }
    }

    public partial class OrganizationResponse2 : OrganizationResponseBase2 { }

    public class OrganizationResponseBase2
    {
        [Parameter("string", "id", 1)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "balance", 2)]
        public virtual int Balance { get; set; }
        [Parameter("string", "status", 3)]
        public virtual string Status { get; set; }
        [Parameter("tuple[]", "packs", 4)]
        public virtual List<DataPackResponse2> Packs { get; set; }
    }

    public partial class AddDataPackRequest2 : AddDataPackRequestBase2 { }

    public class AddDataPackRequestBase2
    {
        [Parameter("string", "organization", 1)]
        public virtual string Organization { get; set; }
        [Parameter("string", "id", 2)]
        public virtual string Id { get; set; }
        [Parameter("uint256", "pricePerUnit", 3)]
        public virtual int PricePerUnit { get; set; }
        [Parameter("string[]", "requestedAttributes", 4)]
        public virtual List<string> RequestedAttributes { get; set; }
    }

    public partial class BuyDataResponse2 : BuyDataResponseBase2 { }

    public class BuyDataResponseBase2
    {
        [Parameter("string", "status", 1)]
        public virtual string Status { get; set; }
        [Parameter("uint256", "amount", 2)]
        public virtual int Amount { get; set; }
    }
    public partial class BuyDataOutputDTO2 : BuyDataOutputDTOBase2 { }

    [FunctionOutput]
    public class BuyDataOutputDTOBase2 : IFunctionOutputDTO
    {
        [Parameter("tuple", "", 1)]
        public virtual BuyDataResponse2 ReturnValue1 { get; set; }
    }
}
