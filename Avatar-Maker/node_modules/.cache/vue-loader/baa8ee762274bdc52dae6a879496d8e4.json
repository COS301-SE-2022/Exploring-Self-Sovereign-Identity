{"remainingRequest":"C:\\Users\\bexyb\\avatar-maker\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\bexyb\\avatar-maker\\src\\components\\save_image.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\bexyb\\avatar-maker\\src\\components\\save_image.vue","mtime":1659459011603},{"path":"C:\\Users\\bexyb\\avatar-maker\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1659459069016},{"path":"C:\\Users\\bexyb\\avatar-maker\\node_modules\\vue-loader\\lib\\index.js","mtime":1659459051041}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgQ2FudmcgZnJvbSAnY2FudmcnOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICdTYXZlSW1hZ2UnLA0KICBtZXRob2RzOiB7DQogICAgLyoqDQogICAgICogVGhpcyBtZXRob2QgY3JlYXRlcyBhbiBpbnZpc2libGUgYW5jaG9yIGVsZW1lbnQgd2hpY2ggaXMgYXV0b21hdGljYWxseSBjbGlja2VkDQogICAgICogaW4gb3JkZXIgdG8gZG93bmxvYWQgdGhlIGltYWdlIHJlZmVyZW5jZWQgYnkgdGhlIFVSTCBwYXNzZWQgdG8gdGhlIG1ldGhvZCwNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbWFnZVVSTCBVUkwgdG8gdGhlIGltYWdlIHRvIGRvd25sb2Fk0Y8NCiAgICAgKi8NCiAgICBkb3dubG9hZEltYWdlKGltYWdlVVJMKSB7DQogICAgICAvLyBDcmVhdGluZyBhbiBpbnZpc2libGUgYW5jaG9yIGVsZW1lbnQgYW5kIGV4ZWN1dGluZyB0aGUgJ2NsaWNrJw0KICAgICAgLy8gbWV0aG9kIHNlZW1zIHRvIGJlIHRoZSBzdGFuZGFyZCB3YXkgb2Ygc3RhcnRpbmcgYSBkb3dubG9hZA0KICAgICAgY29uc3QgZG93bmxvYWRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOw0KICAgICAgZG93bmxvYWRMaW5rLmhyZWYgPSBpbWFnZVVSTDsNCiAgICAgIGRvd25sb2FkTGluay5kb3dubG9hZCA9ICdhdmF0YXIucG5nJzsNCiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG93bmxvYWRMaW5rKTsNCiAgICAgIGRvd25sb2FkTGluay5kaXNwYXRjaEV2ZW50KA0KICAgICAgICAgIG5ldyBNb3VzZUV2ZW50KCdjbGljaycsIHsgDQogICAgICAgICAgICBidWJibGVzOiB0cnVlLCANCiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsIA0KICAgICAgICAgICAgdmlldzogd2luZG93IA0KICAgICAgICAgIH0pDQogICAgICAgICk7DQoNCiAgICAgIC8vIFJlbW92ZSBsaW5rIGFzIGZpbmFsIGNsZWFudXAgc3RlcA0KICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkb3dubG9hZExpbmspOw0KICAgIH0sDQogICAgLyoqDQogICAgICogVGhpcyBtZXRob2QgY29sbGVjdHMgYWxsIF9zZWxlY3RlZF8gc3ZnIGVsZW1lbnRzIGZyb20gdGhlIGF2YXRhcg0KICAgICAqIGFuZCByZW5kZXJzIHRoZW0gaW50byBhIGNhbnZhcyB1c2luZyBjYW52Zy4NCiAgICAgKiBBZnRlcndhcmRzIHRoZSBpbWFnZSBpcyBwcm92aWRlZCBhcyBkb3dubG9hZCB0byB0aGUgdXNlci4NCiAgICAgKi8NCiAgICBhc3luYyBzYXZlSW1hZ2UoKSB7DQogICAgICAvLyBXZSBuZWVkIHRvIGhhdmUgYSBzaW5nbGUgc3ZnIGVsZW1lbnQgd2hpY2ggaXMgcGFzc2VkIHRvIGNhbnZnDQogICAgICBsZXQgY29tYmluZWRTdmcgPSAnPGRpdiBpZD0iYXZhdGFyIiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTsiPjxzdmcgd2lkdGg9IjM2MHB4IiBoZWlnaHQ9IjM2MHB4IiB2aWV3Qm94PSIwIDAgMzYwIDM2MCIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTt3aWR0aDogMTAwJTtoZWlnaHQ6IDEwMCU7Ij4nOw0KDQogICAgICAvLyBIZWxwZXIgbWV0aG9kIHRvIGFkZCBvbmx5IHRob3NlIGdyb3VwIGVsZW1lbnRzIHdoaWNoIGFjdHVhbGx5IGV4aXN0DQogICAgICAvLyB0byB0aGUgY29tYmluZWQgU1ZHIHN0cmluZw0KICAgICAgY29uc3QgYWRkSWZBdmFpbGFibGUgPSAoZWxlbWVudCkgPT4gew0KICAgICAgICBpZiAoZWxlbWVudCAhPT0gdW5kZWZpbmVkICYmIGVsZW1lbnQgIT09IG51bGwpIHsNCiAgICAgICAgICBjb21iaW5lZFN2ZyA9IGNvbWJpbmVkU3ZnICsgZWxlbWVudC5vdXRlckhUTUw7DQogICAgICAgIH0NCiAgICAgIH07DQoNCg0KICAgICAgLy8gU2VsZWN0IHRoZSB2aXNpYmxlIGdyb3VwICc8Zz4nIGZyb20gZXZlcnkgb3B0aW9uIGluIHRoZSBhdmF0YXINCiAgICAgIC8vIGFuZCBhZGQgaXQgdG8gdGhlIGNvbWJpbmVkIFNWRyBzdHJpbmcuDQogICAgICAvLyBOb3RlOiBJdCB3b3VsZCBiZSBzaG9ydGVyIHRvIHVzZSBgYXZhdGFyRGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N2ZycpYCBhbmQgaXRlcmF0ZQ0KICAgICAgLy8gICAgICAgb3ZlciB0aGVzZSBlbnRyaWVzIGFuZCB0aGVpciAnPGc+JyBncm91cHMuIFRoaXMgZG9lcyBub3Qgd29yayBoZXJlIHRob3VnaA0KICAgICAgLy8gICAgICAgYXMgd2UgbmVlZCB0byBwYXkgYXR0ZW50aW9uIHRvIHRoZSBvcmRlciBvZiB0aGUgZWxlbWVudHMgdG8gbWFrZSBzdXJlIG5vdGhpbmcNCiAgICAgIC8vICAgICAgIGlzIGhpZGRlbiBieSBhbm90aGVyIGVsZW1lbnQuDQogICAgICBjb25zdCBhdmF0YXJEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXZhdGFyJyk7DQogICAgICBhZGRJZkF2YWlsYWJsZShhdmF0YXJEaXYucXVlcnlTZWxlY3RvcignI3NraW5Db2xvcicpLnF1ZXJ5U2VsZWN0b3IoJy5zaG93JykpOw0KICAgICAgYWRkSWZBdmFpbGFibGUoYXZhdGFyRGl2LnF1ZXJ5U2VsZWN0b3IoJyN0YXR0b29zJykucXVlcnlTZWxlY3RvcignLnNob3cnKSk7DQogICAgICBhZGRJZkF2YWlsYWJsZShhdmF0YXJEaXYucXVlcnlTZWxlY3RvcignI2FjY2Vzb3JpZXMnKS5xdWVyeVNlbGVjdG9yKCcuc2hvdycpKTsNCiAgICAgIGFkZElmQXZhaWxhYmxlKGF2YXRhckRpdi5xdWVyeVNlbGVjdG9yKCcjY2xvdGhlcycpLnF1ZXJ5U2VsZWN0b3IoJy5zaG93JykpOw0KICAgICAgYWRkSWZBdmFpbGFibGUoYXZhdGFyRGl2LnF1ZXJ5U2VsZWN0b3IoJyNleWVicm93cycpLnF1ZXJ5U2VsZWN0b3IoJy5zaG93JykpOw0KICAgICAgYWRkSWZBdmFpbGFibGUoYXZhdGFyRGl2LnF1ZXJ5U2VsZWN0b3IoJyNleWVzJykucXVlcnlTZWxlY3RvcignLnNob3cnKSk7DQogICAgICBhZGRJZkF2YWlsYWJsZShhdmF0YXJEaXYucXVlcnlTZWxlY3RvcignI21vdXRocycpLnF1ZXJ5U2VsZWN0b3IoJy5zaG93JykpOw0KICAgICAgYWRkSWZBdmFpbGFibGUoYXZhdGFyRGl2LnF1ZXJ5U2VsZWN0b3IoJyNoYWlyJykucXVlcnlTZWxlY3RvcignLnNob3cnKSk7DQogICAgICBhZGRJZkF2YWlsYWJsZShhdmF0YXJEaXYucXVlcnlTZWxlY3RvcignI2ZhY2lhbGhhaXIyJykucXVlcnlTZWxlY3RvcignLnNob3cnKSk7DQogICAgICBhZGRJZkF2YWlsYWJsZShhdmF0YXJEaXYucXVlcnlTZWxlY3RvcignI2dsYXNzZXMnKS5xdWVyeVNlbGVjdG9yKCcuc2hvdycpKTsNCg0KICAgICAgY29tYmluZWRTdmcgPSBjb21iaW5lZFN2ZyArICc8L3N2Zz48L2Rpdj4nOw0KDQogICAgICAvLyBDcmVhdGUgYW4gaW52aXNpYmxlIGNhbnZhcyBhbmQgcmVuZGVyIHRoZSBjb21iaW5lZCBTVkcgb250byB0aGUgY2FudmFzLg0KICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7DQogICAgICBjYW52YXMud2lkdGggPSAxMjAwOw0KICAgICAgY2FudmFzLmhlaWdodCA9IDEyMDA7DQogICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsNCiAgICAgIGNvbnN0IGRyYXduID0gQ2FudmcuZnJvbVN0cmluZyhjdHgsIGNvbWJpbmVkU3ZnKTsNCg0KICAgICAgYXdhaXQgZHJhd24ucmVuZGVyKCk7DQoNCiAgICAgIHRoaXMuZG93bmxvYWRJbWFnZShjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKSk7DQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["save_image.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA","file":"save_image.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <img class=\"random download-img\" @click=\"saveImage\" :src=\"require('../assets/img/download.svg')\">\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Canvg from 'canvg';\r\n\r\nexport default {\r\n  name: 'SaveImage',\r\n  methods: {\r\n    /**\r\n     * This method creates an invisible anchor element which is automatically clicked\r\n     * in order to download the image referenced by the URL passed to the method,\r\n     *\r\n     * @param {string} imageURL URL to the image to download—è\r\n     */\r\n    downloadImage(imageURL) {\r\n      // Creating an invisible anchor element and executing the 'click'\r\n      // method seems to be the standard way of starting a download\r\n      const downloadLink = document.createElement('a');\r\n      downloadLink.href = imageURL;\r\n      downloadLink.download = 'avatar.png';\r\n      document.body.appendChild(downloadLink);\r\n      downloadLink.dispatchEvent(\r\n          new MouseEvent('click', { \r\n            bubbles: true, \r\n            cancelable: true, \r\n            view: window \r\n          })\r\n        );\r\n\r\n      // Remove link as final cleanup step\r\n      document.body.removeChild(downloadLink);\r\n    },\r\n    /**\r\n     * This method collects all _selected_ svg elements from the avatar\r\n     * and renders them into a canvas using canvg.\r\n     * Afterwards the image is provided as download to the user.\r\n     */\r\n    async saveImage() {\r\n      // We need to have a single svg element which is passed to canvg\r\n      let combinedSvg = '<div id=\"avatar\" style=\"position:relative;width:100%;height:100%;\"><svg width=\"360px\" height=\"360px\" viewBox=\"0 0 360 360\" style=\"position: absolute;width: 100%;height: 100%;\">';\r\n\r\n      // Helper method to add only those group elements which actually exist\r\n      // to the combined SVG string\r\n      const addIfAvailable = (element) => {\r\n        if (element !== undefined && element !== null) {\r\n          combinedSvg = combinedSvg + element.outerHTML;\r\n        }\r\n      };\r\n\r\n\r\n      // Select the visible group '<g>' from every option in the avatar\r\n      // and add it to the combined SVG string.\r\n      // Note: It would be shorter to use `avatarDiv.querySelectorAll('svg')` and iterate\r\n      //       over these entries and their '<g>' groups. This does not work here though\r\n      //       as we need to pay attention to the order of the elements to make sure nothing\r\n      //       is hidden by another element.\r\n      const avatarDiv = document.querySelector('#avatar');\r\n      addIfAvailable(avatarDiv.querySelector('#skinColor').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#tattoos').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#accesories').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#clothes').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#eyebrows').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#eyes').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#mouths').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#hair').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#facialhair2').querySelector('.show'));\r\n      addIfAvailable(avatarDiv.querySelector('#glasses').querySelector('.show'));\r\n\r\n      combinedSvg = combinedSvg + '</svg></div>';\r\n\r\n      // Create an invisible canvas and render the combined SVG onto the canvas.\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = 1200;\r\n      canvas.height = 1200;\r\n      const ctx = canvas.getContext('2d');\r\n      const drawn = Canvg.fromString(ctx, combinedSvg);\r\n\r\n      await drawn.render();\r\n\r\n      this.downloadImage(canvas.toDataURL('image/png'));\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}